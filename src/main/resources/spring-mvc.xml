<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
	http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<mvc:annotation-driven />  
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<context:component-scan
		base-package="com.zhb.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!--<bean class="org.jeecgframework.web.system.service.impl.RedisCacheService"/> -->
	<!-- 配置缓存工具类（支持redis\ehcache切换）-->

	<!-- Swagger支持（暂时注释掉提高平台性能，需要此功能，可以放开注释） <context:component-scan base-package="springfox"/> 
		<bean class="org.jeecgframework.core.swagger.SwaggerConfig" /> <mvc:resources 
		mapping="/swagger/**" location="/swagger/" cache-period="31556926" /> -->


	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<!-- ResponseBody返回字符串带双引号解决 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
		<property name="messageConverters">  
			<list>  
				<ref bean="jsonHttpMessageConverter" />  
			</list>  
		</property>  
	</bean>  
  
	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
		<property name="supportedMediaTypes">  
			<list>  
				<value>application/json;charset=UTF-8</value>  
			</list>  
		</property>  
	</bean>  
	<!-- 注册handler method和request的mapping关系。 -->
	<bean
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />

	<!-- html视图解析器 必须先配置freemarkerConfig,注意html是没有prefix前缀属性的-->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
		<property name="templateLoaderPath">  
			<value>/webapp/</value>  
		</property>  
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">1</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
			</props>
		</property>
	</bean>  
	<!-- html视图解析器 必须先配置freemarkerConfig,注意html是没有prefix前缀属性的-->
	<bean id="htmlviewResolver"  
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
		<property name="suffix" value=".html" /> 
		<property name="order" value="0"></property> 
		<property name="contentType" value="text/html;charset=UTF-8"></property>         
	</bean> 
    
    
   
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

  
	<!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
	<bean id="beanNameViewResolver"
		class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="0">
	</bean>
	<!-- 异常处理类 -->
	
</beans>